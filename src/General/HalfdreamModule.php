<?php
/**
 * Created by PhpStorm.
 * User: kuzyt
 * Date: 21.02.2019
 */

namespace KuzyT\Halfdream\General;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;
use KuzyT\Halfdream\Admin\Display\Display;
use KuzyT\Halfdream\Admin\Form\Form;
use KuzyT\Halfdream\General\Page\Page;
use KuzyT\Halfdream\General\Traits\HasIcon;
use KuzyT\Halfdream\General\Traits\HasKey;
use KuzyT\Halfdream\General\Traits\HasLink;
use KuzyT\Halfdream\General\Traits\HasModelClass;

abstract class HalfdreamModule
{
    use HasModelClass, HasKey, HasIcon, HasLink;

    // Setting fields

    /**
     * Required
     * @var string
     */
    protected $modelClass;

    /**
     * If null, it will be generated from ModelClass
     * If titleIsTranslatable is true, must be key for array from lang files like:
     * * 'title' => [
     * *    'fallback' => 'Posts', // used if one of other keys is empty.
     * *    'menu' => 'Blog',
     * *    'display' => 'Posts list',
     * *    'edit' => 'Edit existing post',
     * *    'create' => 'Create new post',
     * *    'front' => 'Blog'
     * * ]
     * @var string
     */
    protected $title;

    /**
     * @var bool If true, title must be key from lang files.
     */
    protected $titleIsTranslatable = false;

    /**
     * Link for frontend.
     * @var string
     */
    protected $link;

    /**
     * @var string
     */
    protected $icon;

    /**
     * If null, it will be generated from ModelClass
     * @var string
     */
    protected $key;

    // Tech fields

    /**
     * @var Display
     */
    protected $display;

    /**
     * @var Form
     */
    protected $form;

    /**
     * @return string
     */
    public function getAdminLink() {
        return route('admin.module.index', ['module' => $this->getKey()]);
    }

    /**
     * @param string $type
     * @return null|string
     */
    public function getTitle($type = 'fallback') {
        if (!$this->titleIsTranslatable) {
            return $this->title;
        }

        if (!is_array($title = __($this->title))) {
            return $title;
        } else {
            if (key_exists($type, $title)) {
                return $title[$type];
            } else {
                return null;
            }
        }
    }

    /**
     * @return Display
     */
    abstract function display();

    /**
     * @param \Illuminate\Support\Collection|\Illuminate\Pagination\LengthAwarePaginator|null $collection
     * @param array $options
     * @return Display
     */
    public function initDisplay($collection = null, $options = []) {
        $display = $this->display();
        $this->initPage($display);
        // Maybe $collection will help in future, but now it will be autogenerated here
        $display->setCollection($collection ?: $display->makeCollection($options));

        return $display;
    }

    /**
     * @param \Illuminate\Database\Eloquent\Model|null $model
     * @return Form
     */
    abstract function form($model = null);

// Example
//
//    public function form() {
//        $form = HalfdreamForm::default();
//
//        $form->comprise([
//            HalfdreamFormElement::text('title', 'Title')->setDefaultValue('Test')->required(),
//            HalfdreamFormElement::textarea('body', 'Body')->setDefaultValue('Test area')->required(),
//            HalfdreamFormElement::email('email', 'Email')->setDefaultValue('admin@kuzyt.com')->required(),
//            HalfdreamFormElement::password('password', 'Password')->setDefaultValue('pass')->required(),
//            HalfdreamFormElement::date('date', 'Date')/*->setDefaultValue(\Carbon\Carbon::create(1990, 3, 22))->required()*/,
//            HalfdreamFormElement::checkbox('checkbox', 'Some checkbox', 'Chbox label')->setDefaultValue(true)->required(),
//            HalfdreamFormElement::switch('switch', 'Some checkbox', 'Switch title')->setDefaultValue(true)->required(),
//            HalfdreamFormElement::time('time', 'Time')->setDefaultValue(\Carbon\Carbon::create(1990, 3, 22, 22, 33, 11))->required(),
//            HalfdreamFormElement::datetime('datetime', 'DateTime')/*->setDefaultValue(\Carbon\Carbon::create(1990, 3, 22, 22, 33, 11))->required()*/,
//            HalfdreamFormElement::select('select1', 'Select')->setCollection(['flint' => 'Flint', 'silver' => 'Silver'])->setDefaultValue('flint'),
//            HalfdreamFormElement::select('select2', 'Select')->setCollection(['Flint', 'Silver']),
//            HalfdreamFormElement::select('select3', 'Select')->setCollectionModel(Post::class, 'title', 'id'),
//            HalfdreamFormElement::radio('radio1', 'Radio')->setCollection(['flint' => 'Flint', 'silver' => 'Silver'])->setDefaultValue('flint'),
//            HalfdreamFormElement::radio('radio2', 'Radio', false)->setCollection(['Flint', 'Silver']),
//            HalfdreamFormElement::radio('radio3', 'Radio')->setHorizontal(false)->setCollectionModel(Post::class, 'title', 'id'),
//            HalfdreamFormElement::uploadimage('uploadimage', 'UploadImage', 'title')->addUploadThumbnails([[30, 30], [500, null], [null, 200]]),
//            HalfdreamFormElement::uploadimages('uploadimages', 'UploadImages', 'title', 'Main Title')->addUploadThumbnails([[25, 30], [550, null], [null, 220]]),
//            HalfdreamFormElement::ckeditor('ckeditor', 'CKEditor')->setDefaultValue('Text here')->required(),
//            HalfdreamFormElement::columns()
//                ->addColumn([
//                    HalfdreamFormElement::text('title', 'Title0'),
//                    HalfdreamFormElement::text('title', 'Title1'),
//                    HalfdreamFormElement::text('title', 'Title2'),
//                    HalfdreamFormElement::text('title', 'Title3')
//                ])
//                ->addColumn([
//                    HalfdreamFormElement::text('title', 'Title0'),
//                    HalfdreamFormElement::text('title', 'Title1'),
//                    HalfdreamFormElement::text('title', 'Title2'),
//                    HalfdreamFormElement::text('title', 'Title3')
//                ])
//                ->addColumn([
//                    HalfdreamFormElement::text('title', 'Title0'),
//                    HalfdreamFormElement::text('title', 'Title1'),
//                    HalfdreamFormElement::text('title', 'Title2'),
//                    HalfdreamFormElement::text('title', 'Title3')
//                ], 6),
//            HalfdreamFormElement::card('Test')->comprise([
//                HalfdreamFormElement::text('title', 'Title0'),
//                HalfdreamFormElement::text('title', 'Title1'),
//                HalfdreamFormElement::text('title', 'Title2'),
//                HalfdreamFormElement::text('title', 'Title3')
//            ]),
//            HalfdreamFormElement::text('title', 'Title'),
//            HalfdreamFormElement::text('title', 'Title'),
//                HalfdreamFormElement::text('title', 'Title0'),
//                HalfdreamFormElement::text('title', 'Title1'),
//                HalfdreamFormElement::text('title', 'Title2'),
//                HalfdreamFormElement::text('title', 'Title3'),
//                HalfdreamFormElement::card('Test')->comprise([
//                    HalfdreamFormElement::text('title', 'Title0'),
//                    HalfdreamFormElement::text('title', 'Title1'),
//                    HalfdreamFormElement::text('title', 'Title2'),
//                    HalfdreamFormElement::text('title', 'Title3')
//                ]),
//                HalfdreamFormElement::translatableCard('Test')->comprise([
//                    HalfdreamFormElement::text('title', 'Title0'),
//                    HalfdreamFormElement::text('title', 'Title1'),
//                    HalfdreamFormElement::text('title', 'Title2'),
//                    HalfdreamFormElement::text('title', 'Title3')
//                ]),
//            HalfdreamFormElement::panel('Test')->comprise([
//                    HalfdreamFormElement::text('title', 'Title0'),
//                    HalfdreamFormElement::text('title', 'Title1'),
//                    HalfdreamFormElement::text('title', 'Title2'),
//                    HalfdreamFormElement::text('title', 'Title3')
//                ]),
//            HalfdreamFormElement::translatablePanel('Test')->comprise([
//                    HalfdreamFormElement::text('title', 'Title0'),
//                    HalfdreamFormElement::text('title', 'Title1'),
//                    HalfdreamFormElement::text('title', 'Title2'),
//                    HalfdreamFormElement::text('title', 'Title3')
//                ]),
//                HalfdreamFormElement::card()->comprise([
//                    HalfdreamFormElement::text('title', 'Title0'),
//                    HalfdreamFormElement::text('title', 'Title1'),
//                    HalfdreamFormElement::text('title', 'Title2'),
//                    HalfdreamFormElement::text('title', 'Title3')
//                ]),
//            HalfdreamFormElement::text('title', 'Title'),
//            HalfdreamFormElement::text('title', 'Title'),
//        ]);
//
//        return $form;
//    }

    /**
     * @param Model|null $model
     * @return Form
     */
    public function initForm(Model $model = null) {
        $form = $this->form($model);
        $this->initPage($form);
        if($model) {
            $form->setModel($model);
        }

        return $form;
    }

    /**
     * @param Page $page
     */
    protected function initPage(Page $page) {
        $page->setModelClass($this->getModelClass());
        $page->setKey($this->getKey());
    }

    /**
     * @param $id
     * @param null|string  $field
     * @param null|string $locale
     * @return null|Model
     */
    public function find($id, $field = null, $locale = null) {
        $result = $this->query();
        if ($field) {
            if ($locale) {
                $result = $result->where($field . '->' . $locale, $id)
                                 // Special for cases when added additional language with empty field
                                 ->orWhere($field . '->' . (config('halfdream.locale.default')), $id);
            } else {
                $result = $result->where($field, $id);
            }
            $result = $result->first();
        } else {
            $result = $result->find($id);
        }

        return $result;
    }

    /**
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function query() {
        return ($this->getModelClass())::query();
    }

    /**
     * @return mixed|Model
     */
    public function create() {
        $modelClass = $this->getModelClass();
        return new $modelClass;
    }

    /**
     * @param Request $request
     * @param Form $form
     * @return array
     * @throws \Illuminate\Validation\ValidationException
     */
    public function validateForm(Request $request, Form $form) {
        return \Validator::validate(
            $request->all(),
            \Halfdream::comprisableValidatorRules($form),
            \Halfdream::comprisableValidatorMessages($form),
            \Halfdream::comprisableValidatorAttributeNames($form)
        );
    }

    /**
     * @param $validated
     * @param Form $form
     */
    public function setForm($validated, Form $form) {
        \Halfdream::comprisableSetValues($form, $validated);
    }


}
